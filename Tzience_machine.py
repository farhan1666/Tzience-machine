from PyQt5 import QtCore, QtGui, QtWidgets
import pyperclip
import time
import webbrowser
import zuk_sim_backend

class Ui_TzienceMachine(object):
	def setupUi(self, TzienceMachine):
		TzienceMachine.setObjectName("TzienceMachine")
		TzienceMachine.resize(385, 553)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(TzienceMachine.sizePolicy().hasHeightForWidth())
		TzienceMachine.setSizePolicy(sizePolicy)
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap("icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		TzienceMachine.setWindowIcon(icon)
		self.centralwidget = QtWidgets.QWidget(TzienceMachine)
		self.centralwidget.setObjectName("centralwidget")
		self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
		self.verticalLayout_2.setObjectName("verticalLayout_2")
		self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_5.setObjectName("horizontalLayout_5")
		self.label = QtWidgets.QLabel(self.centralwidget)
		self.label.setObjectName("label")
		self.horizontalLayout_5.addWidget(self.label)
		spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_5.addItem(spacerItem)
		self.simCount = QtWidgets.QSpinBox(self.centralwidget)
		self.simCount.setMinimumSize(QtCore.QSize(100, 0))
		self.simCount.setMaximum(1000000)
		self.simCount.setProperty("value", 10000)
		self.simCount.setObjectName("simCount")
		self.horizontalLayout_5.addWidget(self.simCount)
		self.verticalLayout_2.addLayout(self.horizontalLayout_5)
		self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_6.setObjectName("horizontalLayout_6")
		self.label_2 = QtWidgets.QLabel(self.centralwidget)
		self.label_2.setObjectName("label_2")
		self.horizontalLayout_6.addWidget(self.label_2)
		spacerItem1 = QtWidgets.QSpacerItem(31, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_6.addItem(spacerItem1)
		self.gearBox = QtWidgets.QComboBox(self.centralwidget)
		self.gearBox.setMinimumSize(QtCore.QSize(100, 0))
		self.gearBox.setObjectName("gearBox")
		self.gearBox.addItem("")
		self.gearBox.addItem("")
		self.gearBox.addItem("")
		self.gearBox.addItem("")
		self.gearBox.addItem("")
		self.horizontalLayout_6.addWidget(self.gearBox)
		self.verticalLayout_2.addLayout(self.horizontalLayout_6)
		self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_8.setObjectName("horizontalLayout_8")
		self.label_3 = QtWidgets.QLabel(self.centralwidget)
		self.label_3.setObjectName("label_3")
		self.horizontalLayout_8.addWidget(self.label_3)
		spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_8.addItem(spacerItem2)
		self.includeMager = QtWidgets.QCheckBox(self.centralwidget)
		self.includeMager.setMinimumSize(QtCore.QSize(50, 0))
		self.includeMager.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
		self.includeMager.setLayoutDirection(QtCore.Qt.LeftToRight)
		self.includeMager.setText("")
		self.includeMager.setChecked(True)
		self.includeMager.setObjectName("includeMager")
		self.horizontalLayout_8.addWidget(self.includeMager)
		self.verticalLayout_2.addLayout(self.horizontalLayout_8)
		self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_10.setObjectName("horizontalLayout_10")
		self.label_4 = QtWidgets.QLabel(self.centralwidget)
		self.label_4.setObjectName("label_4")
		self.horizontalLayout_10.addWidget(self.label_4)
		spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_10.addItem(spacerItem3)
		self.includeJad = QtWidgets.QCheckBox(self.centralwidget)
		self.includeJad.setMinimumSize(QtCore.QSize(50, 0))
		self.includeJad.setText("")
		self.includeJad.setChecked(True)
		self.includeJad.setObjectName("includeJad")
		self.horizontalLayout_10.addWidget(self.includeJad)
		self.verticalLayout_2.addLayout(self.horizontalLayout_10)
		self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_11.setObjectName("horizontalLayout_11")
		self.label_5 = QtWidgets.QLabel(self.centralwidget)
		self.label_5.setObjectName("label_5")
		self.horizontalLayout_11.addWidget(self.label_5)
		spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_11.addItem(spacerItem4)
		self.includeTrips = QtWidgets.QCheckBox(self.centralwidget)
		self.includeTrips.setMinimumSize(QtCore.QSize(50, 0))
		self.includeTrips.setText("")
		self.includeTrips.setChecked(True)
		self.includeTrips.setObjectName("includeTrips")
		self.horizontalLayout_11.addWidget(self.includeTrips)
		self.verticalLayout_2.addLayout(self.horizontalLayout_11)
		self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_12.setObjectName("horizontalLayout_12")
		self.label_6 = QtWidgets.QLabel(self.centralwidget)
		self.label_6.setObjectName("label_6")
		self.horizontalLayout_12.addWidget(self.label_6)
		spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_12.addItem(spacerItem5)
		self.includeZuk = QtWidgets.QCheckBox(self.centralwidget)
		self.includeZuk.setMinimumSize(QtCore.QSize(50, 0))
		self.includeZuk.setText("")
		self.includeZuk.setChecked(True)
		self.includeZuk.setObjectName("includeZuk")
		self.horizontalLayout_12.addWidget(self.includeZuk)
		self.verticalLayout_2.addLayout(self.horizontalLayout_12)
		self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_19.setObjectName("horizontalLayout_19")
		self.includeZukMager = QtWidgets.QCheckBox(self.centralwidget)
		self.includeZukMager.setLayoutDirection(QtCore.Qt.RightToLeft)
		self.includeZukMager.setChecked(True)
		self.includeZukMager.setObjectName("includeZukMager")
		self.horizontalLayout_19.addWidget(self.includeZukMager)
		self.includeZukJad = QtWidgets.QCheckBox(self.centralwidget)
		self.includeZukJad.setLayoutDirection(QtCore.Qt.RightToLeft)
		self.includeZukJad.setChecked(True)
		self.includeZukJad.setObjectName("includeZukJad")
		self.horizontalLayout_19.addWidget(self.includeZukJad)
		self.includeZukHealers = QtWidgets.QCheckBox(self.centralwidget)
		self.includeZukHealers.setLayoutDirection(QtCore.Qt.RightToLeft)
		self.includeZukHealers.setChecked(True)
		self.includeZukHealers.setObjectName("includeZukHealers")
		self.horizontalLayout_19.addWidget(self.includeZukHealers)
		self.verticalLayout_2.addLayout(self.horizontalLayout_19)
		self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_4.setObjectName("horizontalLayout_4")
		self.startSim_btn = QtWidgets.QPushButton(self.centralwidget)
		self.startSim_btn.setObjectName("startSim_btn")
		self.horizontalLayout_4.addWidget(self.startSim_btn)
		self.verticalLayout_2.addLayout(self.horizontalLayout_4)
		self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_13.setObjectName("horizontalLayout_13")
		self.completionLine = QtWidgets.QLineEdit(self.centralwidget)
		self.completionLine.setEnabled(True)
		self.completionLine.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
		self.completionLine.setAutoFillBackground(True)
		self.completionLine.setReadOnly(True)
		self.completionLine.setObjectName("completionLine")
		self.horizontalLayout_13.addWidget(self.completionLine)
		self.verticalLayout_2.addLayout(self.horizontalLayout_13)
		self.horizontalLayout = QtWidgets.QHBoxLayout()
		self.horizontalLayout.setObjectName("horizontalLayout")
		self.noSetLine = QtWidgets.QLineEdit(self.centralwidget)
		self.noSetLine.setReadOnly(True)
		self.noSetLine.setObjectName("noSetLine")
		self.horizontalLayout.addWidget(self.noSetLine)
		self.verticalLayout_2.addLayout(self.horizontalLayout)
		self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_14.setObjectName("horizontalLayout_14")
		self.mageKillTimeLabel = QtWidgets.QLabel(self.centralwidget)
		self.mageKillTimeLabel.setObjectName("mageKillTimeLabel")
		self.horizontalLayout_14.addWidget(self.mageKillTimeLabel)
		spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_14.addItem(spacerItem6)
		self.mageKillTimeCopy = QtWidgets.QPushButton(self.centralwidget)
		self.mageKillTimeCopy.setObjectName("mageKillTimeCopy")
		self.horizontalLayout_14.addWidget(self.mageKillTimeCopy)
		self.verticalLayout_2.addLayout(self.horizontalLayout_14)
		self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_15.setObjectName("horizontalLayout_15")
		self.singleJadKillTimeLabel = QtWidgets.QLabel(self.centralwidget)
		self.singleJadKillTimeLabel.setObjectName("singleJadKillTimeLabel")
		self.horizontalLayout_15.addWidget(self.singleJadKillTimeLabel)
		spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_15.addItem(spacerItem7)
		self.singleJadKillTimeCopy = QtWidgets.QPushButton(self.centralwidget)
		self.singleJadKillTimeCopy.setObjectName("singleJadKillTimeCopy")
		self.horizontalLayout_15.addWidget(self.singleJadKillTimeCopy)
		self.verticalLayout_2.addLayout(self.horizontalLayout_15)
		self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_16.setObjectName("horizontalLayout_16")
		self.tripleJadsKillTimeLabel = QtWidgets.QLabel(self.centralwidget)
		self.tripleJadsKillTimeLabel.setObjectName("tripleJadsKillTimeLabel")
		self.horizontalLayout_16.addWidget(self.tripleJadsKillTimeLabel)
		spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_16.addItem(spacerItem8)
		self.tripleJadsKillTimeCopy = QtWidgets.QPushButton(self.centralwidget)
		self.tripleJadsKillTimeCopy.setObjectName("tripleJadsKillTimeCopy")
		self.horizontalLayout_16.addWidget(self.tripleJadsKillTimeCopy)
		self.verticalLayout_2.addLayout(self.horizontalLayout_16)
		self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_7.setObjectName("horizontalLayout_7")
		self.zukKillTimeLabel = QtWidgets.QLabel(self.centralwidget)
		self.zukKillTimeLabel.setObjectName("zukKillTimeLabel")
		self.horizontalLayout_7.addWidget(self.zukKillTimeLabel)
		spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_7.addItem(spacerItem9)
		self.zukKillTimeCopy = QtWidgets.QPushButton(self.centralwidget)
		self.zukKillTimeCopy.setObjectName("zukKillTimeCopy")
		self.horizontalLayout_7.addWidget(self.zukKillTimeCopy)
		self.verticalLayout_2.addLayout(self.horizontalLayout_7)
		self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_9.setObjectName("horizontalLayout_9")
		self.zukSetTimeLabel = QtWidgets.QLabel(self.centralwidget)
		self.zukSetTimeLabel.setObjectName("zukSetTimeLabel")
		self.horizontalLayout_9.addWidget(self.zukSetTimeLabel)
		spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_9.addItem(spacerItem10)
		self.zukSetTimeCopy = QtWidgets.QPushButton(self.centralwidget)
		self.zukSetTimeCopy.setObjectName("zukSetTimeCopy")
		self.horizontalLayout_9.addWidget(self.zukSetTimeCopy)
		self.verticalLayout_2.addLayout(self.horizontalLayout_9)
		self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_17.setObjectName("horizontalLayout_17")
		self.zukNoSetTimeLabel = QtWidgets.QLabel(self.centralwidget)
		self.zukNoSetTimeLabel.setObjectName("zukNoSetTimeLabel")
		self.horizontalLayout_17.addWidget(self.zukNoSetTimeLabel)
		spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_17.addItem(spacerItem11)
		self.zukNoSetTimeCopy = QtWidgets.QPushButton(self.centralwidget)
		self.zukNoSetTimeCopy.setObjectName("zukNoSetTimeCopy")
		self.horizontalLayout_17.addWidget(self.zukNoSetTimeCopy)
		self.verticalLayout_2.addLayout(self.horizontalLayout_17)
		self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_18.setObjectName("horizontalLayout_18")
		self.copyZukSim_btn = QtWidgets.QPushButton(self.centralwidget)
		self.copyZukSim_btn.setObjectName("copyZukSim_btn")
		self.horizontalLayout_18.addWidget(self.copyZukSim_btn)
		self.verticalLayout_2.addLayout(self.horizontalLayout_18)
		TzienceMachine.setCentralWidget(self.centralwidget)
		self.menubar = QtWidgets.QMenuBar(TzienceMachine)
		self.menubar.setGeometry(QtCore.QRect(0, 0, 385, 21))
		self.menubar.setObjectName("menubar")
		self.menuTest = QtWidgets.QMenu(self.menubar)
		self.menuTest.setObjectName("menuTest")
		self.menuList_of_Assumptions = QtWidgets.QMenu(self.menuTest)
		self.menuList_of_Assumptions.setObjectName("menuList_of_Assumptions")
		self.menuGear_setups = QtWidgets.QMenu(self.menuTest)
		self.menuGear_setups.setObjectName("menuGear_setups")
		self.menuCredits = QtWidgets.QMenu(self.menuTest)
		self.menuCredits.setObjectName("menuCredits")
		TzienceMachine.setMenuBar(self.menubar)
		self.statusbar = QtWidgets.QStatusBar(TzienceMachine)
		self.statusbar.setObjectName("statusbar")
		TzienceMachine.setStatusBar(self.statusbar)
		self.actionNoHPRegen = QtWidgets.QAction(TzienceMachine)
		self.actionNoHPRegen.setObjectName("actionAssumes_mobs_don't_regen_hp")
		self.actionAll_actions_are_tick_perfect = QtWidgets.QAction(TzienceMachine)
		self.actionAll_actions_are_tick_perfect.setObjectName("actionAll_actions_are_tick_perfect")
		self.action2_This_sim_uses_Python_RNG_which_may_differ_slightly_from_Java_RNG = QtWidgets.QAction(TzienceMachine)
		self.action2_This_sim_uses_Python_RNG_which_may_differ_slightly_from_Java_RNG.setObjectName("action2_This_sim_uses_Python_RNG_which_may_differ_slightly_from_Java_RNG")
		self.actionAssumes_Jad_Mager_skip = QtWidgets.QAction(TzienceMachine)
		self.actionAssumes_Jad_Mager_skip.setObjectName("actionAssumes_Jad_Mager_skip")
		self.action4_Assumes_each_Triple_Jad_heals_2_times = QtWidgets.QAction(TzienceMachine)
		self.action4_Assumes_each_Triple_Jad_heals_2_times.setObjectName("action4_Assumes_each_Triple_Jad_heals_2_times")
		self.action5_Assumes_in_a_no_set_Zuk_blowpipe_is_used_to_tag_Jad = QtWidgets.QAction(TzienceMachine)
		self.action5_Assumes_in_a_no_set_Zuk_blowpipe_is_used_to_tag_Jad.setObjectName("action5_Assumes_in_a_no_set_Zuk_blowpipe_is_used_to_tag_Jad")
		self.action6_Assumes_in_a_set_zuk_chins_are_used_to_tag_jad = QtWidgets.QAction(TzienceMachine)
		self.action6_Assumes_in_a_set_zuk_chins_are_used_to_tag_jad.setObjectName("action6_Assumes_in_a_set_zuk_chins_are_used_to_tag_jad")
		self.action7_Assumes_tick_perfect_healer_tagging_on_Zuk_is_always_possible = QtWidgets.QAction(TzienceMachine)
		self.action7_Assumes_tick_perfect_healer_tagging_on_Zuk_is_always_possible.setObjectName("action7_Assumes_tick_perfect_healer_tagging_on_Zuk_is_always_possible")
		self.action8_Assumes_east_west_shield_movement_is_0_time_loss_as_you_can_hit_zuk_in_the_time_it_takes_the_shield_to_travel = QtWidgets.QAction(TzienceMachine)
		self.action8_Assumes_east_west_shield_movement_is_0_time_loss_as_you_can_hit_zuk_in_the_time_it_takes_the_shield_to_travel.setObjectName("action8_Assumes_east_west_shield_movement_is_0_time_loss_as_you_can_hit_zuk_in_the_time_it_takes_the_shield_to_travel")
		self.actionHead_Slayer_helm_i = QtWidgets.QAction(TzienceMachine)
		self.actionHead_Slayer_helm_i.setObjectName("actionHead_Slayer_helm_i")
		self.actionCape_Ava_s_assembler = QtWidgets.QAction(TzienceMachine)
		self.actionCape_Ava_s_assembler.setObjectName("actionCape_Ava_s_assembler")
		self.actionNeck_Necklace_of_Anguish = QtWidgets.QAction(TzienceMachine)
		self.actionNeck_Necklace_of_Anguish.setObjectName("actionNeck_Necklace_of_Anguish")
		self.actionAmmo_Dragon_arrows_Dragon_darts = QtWidgets.QAction(TzienceMachine)
		self.actionAmmo_Dragon_arrows_Dragon_darts.setObjectName("actionAmmo_Dragon_arrows_Dragon_darts")
		self.actionChest_Armadyl_chestplate = QtWidgets.QAction(TzienceMachine)
		self.actionChest_Armadyl_chestplate.setObjectName("actionChest_Armadyl_chestplate")
		self.actionLegs_Armadyl_chainskirt = QtWidgets.QAction(TzienceMachine)
		self.actionLegs_Armadyl_chainskirt.setObjectName("actionLegs_Armadyl_chainskirt")
		self.actionCape_Ava_s_assembler_2 = QtWidgets.QAction(TzienceMachine)
		self.actionCape_Ava_s_assembler_2.setObjectName("actionCape_Ava_s_assembler_2")
		self.actionNeck_Necklace_of_anguish = QtWidgets.QAction(TzienceMachine)
		self.actionNeck_Necklace_of_anguish.setObjectName("actionNeck_Necklace_of_anguish")
		self.actionAmmo_Dragon_arrows_Dragon_darts_2 = QtWidgets.QAction(TzienceMachine)
		self.actionAmmo_Dragon_arrows_Dragon_darts_2.setObjectName("actionAmmo_Dragon_arrows_Dragon_darts_2")
		self.actionBody_Armadyl_Chestplate = QtWidgets.QAction(TzienceMachine)
		self.actionBody_Armadyl_Chestplate.setObjectName("actionBody_Armadyl_Chestplate")
		self.actionLegs_Armadyl_chainskirt_2 = QtWidgets.QAction(TzienceMachine)
		self.actionLegs_Armadyl_chainskirt_2.setObjectName("actionLegs_Armadyl_chainskirt_2")
		self.actionGloves_Barrows_gloves = QtWidgets.QAction(TzienceMachine)
		self.actionGloves_Barrows_gloves.setObjectName("actionGloves_Barrows_gloves")
		self.actionBoots_Pegasian_boots = QtWidgets.QAction(TzienceMachine)
		self.actionBoots_Pegasian_boots.setObjectName("actionBoots_Pegasian_boots")
		self.actionRing_Ring_of_the_gods_i = QtWidgets.QAction(TzienceMachine)
		self.actionRing_Ring_of_the_gods_i.setObjectName("actionRing_Ring_of_the_gods_i")
		self.actionHead_Slayer_helm_i_2 = QtWidgets.QAction(TzienceMachine)
		self.actionHead_Slayer_helm_i_2.setObjectName("actionHead_Slayer_helm_i_2")
		self.actionBoots_Pegasian_boots_2 = QtWidgets.QAction(TzienceMachine)
		self.actionBoots_Pegasian_boots_2.setObjectName("actionBoots_Pegasian_boots_2")
		self.actionRing_Archers_ring_i = QtWidgets.QAction(TzienceMachine)
		self.actionRing_Archers_ring_i.setObjectName("actionRing_Archers_ring_i")
		self.actionHead_Slayer_helm_i_3 = QtWidgets.QAction(TzienceMachine)
		self.actionHead_Slayer_helm_i_3.setObjectName("actionHead_Slayer_helm_i_3")
		self.actionBoots_Devout_boots = QtWidgets.QAction(TzienceMachine)
		self.actionBoots_Devout_boots.setObjectName("actionBoots_Devout_boots")
		self.actionRing_Ring_of_the_gods_i_2 = QtWidgets.QAction(TzienceMachine)
		self.actionRing_Ring_of_the_gods_i_2.setObjectName("actionRing_Ring_of_the_gods_i_2")
		self.actionHead_Armadyl_helmet = QtWidgets.QAction(TzienceMachine)
		self.actionHead_Armadyl_helmet.setObjectName("actionHead_Armadyl_helmet")
		self.actionBoots_Pegasian_boots_3 = QtWidgets.QAction(TzienceMachine)
		self.actionBoots_Pegasian_boots_3.setObjectName("actionBoots_Pegasian_boots_3")
		self.actionRing_Ring_of_the_gods_i_3 = QtWidgets.QAction(TzienceMachine)
		self.actionRing_Ring_of_the_gods_i_3.setObjectName("actionRing_Ring_of_the_gods_i_3")
		self.actionHead_Armadyl_helmet_2 = QtWidgets.QAction(TzienceMachine)
		self.actionHead_Armadyl_helmet_2.setObjectName("actionHead_Armadyl_helmet_2")
		self.actionBoots_Devout_boots_2 = QtWidgets.QAction(TzienceMachine)
		self.actionBoots_Devout_boots_2.setObjectName("actionBoots_Devout_boots_2")
		self.actionRing_Ring_of_the_gods_i_4 = QtWidgets.QAction(TzienceMachine)
		self.actionRing_Ring_of_the_gods_i_4.setObjectName("actionRing_Ring_of_the_gods_i_4")
		self.action9_v = QtWidgets.QAction(TzienceMachine)
		self.action9_v.setObjectName("action9_v")
		self.actionThis_tool_was_made_possible_thanks_to_the_following_people = QtWidgets.QAction(TzienceMachine)
		self.actionThis_tool_was_made_possible_thanks_to_the_following_people.setObjectName("actionThis_tool_was_made_possible_thanks_to_the_following_people")
		self.action_Phoneman_btw_Main_development = QtWidgets.QAction(TzienceMachine)
		self.action_Phoneman_btw_Main_development.setObjectName("action_Phoneman_btw_Main_development")
		self.action_JasonT20015_Moral_support_and_backseating = QtWidgets.QAction(TzienceMachine)
		self.action_JasonT20015_Moral_support_and_backseating.setObjectName("action_JasonT20015_Moral_support_and_backseating")
		self.action_aatykon_Original_idea_for_the_tool = QtWidgets.QAction(TzienceMachine)
		self.action_aatykon_Original_idea_for_the_tool.setObjectName("action_aatykon_Original_idea_for_the_tool")
		self.actionDJ_Kumboi_Jad_healer_research = QtWidgets.QAction(TzienceMachine)
		self.actionDJ_Kumboi_Jad_healer_research.setObjectName("actionDJ_Kumboi_Jad_healer_research")
		self.actionWeapon_Twisted_bow_Toxic_blowpipe = QtWidgets.QAction(TzienceMachine)
		self.actionWeapon_Twisted_bow_Toxic_blowpipe.setObjectName("actionWeapon_Twisted_bow_Toxic_blowpipe")
		self.actionShield_None = QtWidgets.QAction(TzienceMachine)
		self.actionShield_None.setObjectName("actionShield_None")
		self.actionEveryone_from_the_Inferno_Speedrunning_Discord_discord_gg_zuk = QtWidgets.QAction(TzienceMachine)
		self.actionEveryone_from_the_Inferno_Speedrunning_Discord_discord_gg_zuk.setObjectName("actionEveryone_from_the_Inferno_Speedrunning_Discord_discord_gg_zuk")
		self.action10_Assumes_you_are_always_max_potted_the_only_time_where_this_assumption_becomes_questionable_is_during_a_healer_skip = QtWidgets.QAction(TzienceMachine)
		self.action10_Assumes_you_are_always_max_potted_the_only_time_where_this_assumption_becomes_questionable_is_during_a_healer_skip.setObjectName("action10_Assumes_you_are_always_max_potted_the_only_time_where_this_assumption_becomes_questionable_is_during_a_healer_skip")
		self.action_JagexAsh_Clearing_up_how_Jad_Healers_work = QtWidgets.QAction(TzienceMachine)
		self.action_JagexAsh_Clearing_up_how_Jad_Healers_work.setObjectName("action_JagexAsh_Clearing_up_how_Jad_Healers_work")
		self.actionTest = QtWidgets.QAction(TzienceMachine)
		self.actionTest.setObjectName("actionTest")
		self.actionTask_Standard = QtWidgets.QAction(TzienceMachine)
		self.actionTask_Standard.setObjectName("actionTask_Standard")
		self.actionTask_Archers = QtWidgets.QAction(TzienceMachine)
		self.actionTask_Archers.setObjectName("actionTask_Archers")
		self.actionTask_Devout = QtWidgets.QAction(TzienceMachine)
		self.actionTask_Devout.setObjectName("actionTask_Devout")
		self.actionOff_Task_Standard = QtWidgets.QAction(TzienceMachine)
		self.actionOff_Task_Standard.setObjectName("actionOff_Task_Standard")
		self.actionOff_Task_Devout = QtWidgets.QAction(TzienceMachine)
		self.actionOff_Task_Devout.setObjectName("actionOff_Task_Devout")
		self.action_haiyoart_Application_logo = QtWidgets.QAction(TzienceMachine)
		self.action_haiyoart_Application_logo.setObjectName("action_haiyoart_Application_logo")
		self.menuList_of_Assumptions.addAction(self.actionAll_actions_are_tick_perfect)
		self.menuList_of_Assumptions.addAction(self.action2_This_sim_uses_Python_RNG_which_may_differ_slightly_from_Java_RNG)
		self.menuList_of_Assumptions.addAction(self.actionAssumes_Jad_Mager_skip)
		self.menuList_of_Assumptions.addAction(self.action4_Assumes_each_Triple_Jad_heals_2_times)
		self.menuList_of_Assumptions.addAction(self.action5_Assumes_in_a_no_set_Zuk_blowpipe_is_used_to_tag_Jad)
		self.menuList_of_Assumptions.addAction(self.action6_Assumes_in_a_set_zuk_chins_are_used_to_tag_jad)
		self.menuList_of_Assumptions.addAction(self.action7_Assumes_tick_perfect_healer_tagging_on_Zuk_is_always_possible)
		self.menuList_of_Assumptions.addAction(self.action8_Assumes_east_west_shield_movement_is_0_time_loss_as_you_can_hit_zuk_in_the_time_it_takes_the_shield_to_travel)
		self.menuList_of_Assumptions.addAction(self.action10_Assumes_you_are_always_max_potted_the_only_time_where_this_assumption_becomes_questionable_is_during_a_healer_skip)
		self.menuList_of_Assumptions.addAction(self.actionNoHPRegen)
		self.menuGear_setups.addAction(self.actionTask_Standard)
		self.menuGear_setups.addAction(self.actionTask_Archers)
		self.menuGear_setups.addAction(self.actionTask_Devout)
		self.menuGear_setups.addAction(self.actionOff_Task_Standard)
		self.menuGear_setups.addAction(self.actionOff_Task_Devout)
		self.menuCredits.addAction(self.actionThis_tool_was_made_possible_thanks_to_the_following_people)
		self.menuCredits.addSeparator()
		self.menuCredits.addAction(self.action_Phoneman_btw_Main_development)
		self.menuCredits.addAction(self.action_JasonT20015_Moral_support_and_backseating)
		self.menuCredits.addAction(self.action_aatykon_Original_idea_for_the_tool)
		self.menuCredits.addAction(self.action_haiyoart_Application_logo)
		self.menuCredits.addAction(self.actionDJ_Kumboi_Jad_healer_research)
		self.menuCredits.addAction(self.action_JagexAsh_Clearing_up_how_Jad_Healers_work)
		self.menuCredits.addAction(self.actionEveryone_from_the_Inferno_Speedrunning_Discord_discord_gg_zuk)
		self.menuTest.addAction(self.menuList_of_Assumptions.menuAction())
		self.menuTest.addAction(self.menuGear_setups.menuAction())
		self.menuTest.addAction(self.menuCredits.menuAction())
		self.menubar.addAction(self.menuTest.menuAction())

		self.startSim_btn.clicked.connect(self.startSim)
		self.mageKillTimeCopy.clicked.connect(self.copyMageData)
		self.singleJadKillTimeCopy.clicked.connect(self.copySingleJadData)
		self.tripleJadsKillTimeCopy.clicked.connect(self.copyTripleJadData)
		self.zukKillTimeCopy.clicked.connect(self.copyZukData)
		self.zukSetTimeCopy.clicked.connect(self.copySetZukData)
		self.zukNoSetTimeCopy.clicked.connect(self.copyNoSetZukData)
		self.copyZukSim_btn.clicked.connect(self.copyZukDistribution)

		self.action_Phoneman_btw_Main_development.triggered.connect(self.linkToPhoneman)
		self.action_JasonT20015_Moral_support_and_backseating.triggered.connect(self.linkToJason)
		self.action_aatykon_Original_idea_for_the_tool.triggered.connect(self.linkToAaty)
		self.action_haiyoart_Application_logo.triggered.connect(self.linkToHaiYo)
		self.actionDJ_Kumboi_Jad_healer_research.triggered.connect(self.linkToDjKumboi)
		self.action_JagexAsh_Clearing_up_how_Jad_Healers_work.triggered.connect(self.linkToAshTweet)
		self.actionEveryone_from_the_Inferno_Speedrunning_Discord_discord_gg_zuk.triggered.connect(self.linkToInfernoDisc)

		self.actionTask_Standard.triggered.connect(self.linkToTaskStandard)
		self.actionTask_Archers.triggered.connect(self.linkToTaskArchers)
		self.actionTask_Devout.triggered.connect(self.linkToTaskDevout)
		self.actionOff_Task_Standard.triggered.connect(self.linkToOffTaskStandard)
		self.actionOff_Task_Devout.triggered.connect(self.linkToOffTaskDevout)

		self.retranslateUi(TzienceMachine)
		QtCore.QMetaObject.connectSlotsByName(TzienceMachine)

	def retranslateUi(self, TzienceMachine):
		_translate = QtCore.QCoreApplication.translate
		TzienceMachine.setWindowTitle(_translate("TzienceMachine", "Tzience Machine"))
		self.label.setText(_translate("TzienceMachine", "Number of Simulations"))
		self.label_2.setText(_translate("TzienceMachine", "Gear Setup"))
		self.gearBox.setItemText(0, _translate("TzienceMachine", "Task Standard"))
		self.gearBox.setItemText(1, _translate("TzienceMachine", "Task Archers"))
		self.gearBox.setItemText(2, _translate("TzienceMachine", "Task Devout"))
		self.gearBox.setItemText(3, _translate("TzienceMachine", "Off Task Standard"))
		self.gearBox.setItemText(4, _translate("TzienceMachine", "Off Task Devout"))
		self.label_3.setText(_translate("TzienceMachine", "Include Mager?"))
		self.label_4.setText(_translate("TzienceMachine", "Include Single Jad?"))
		self.label_5.setText(_translate("TzienceMachine", "Include Triple Jads?"))
		self.label_6.setText(_translate("TzienceMachine", "Include Zuk?"))
		self.includeZukMager.setText(_translate("TzienceMachine", "Kill Zuk Mager"))
		self.includeZukJad.setText(_translate("TzienceMachine", "Kill Zuk Jad"))
		self.includeZukHealers.setText(_translate("TzienceMachine", "Kill Zuk Healers"))
		self.startSim_btn.setText(_translate("TzienceMachine", "Start Simulations"))
		self.completionLine.setText(_translate("TzienceMachine", "x simulations completed with Task Standard. [Completed in 00:00]"))
		self.noSetLine.setText(_translate("TzienceMachine", "Total no set Zuks: x (xx.xx%)"))
		self.mageKillTimeLabel.setText(_translate("TzienceMachine", "Mager average kill time: x ticks"))
		self.mageKillTimeCopy.setText(_translate("TzienceMachine", "Copy data"))
		self.singleJadKillTimeLabel.setText(_translate("TzienceMachine", "Single Jad average kill time: x ticks"))
		self.singleJadKillTimeCopy.setText(_translate("TzienceMachine", "Copy data"))
		self.tripleJadsKillTimeLabel.setText(_translate("TzienceMachine", "Triple Jad average kill time: x ticks"))
		self.tripleJadsKillTimeCopy.setText(_translate("TzienceMachine", "Copy data"))
		self.zukKillTimeLabel.setText(_translate("TzienceMachine", "Zuk average kill time: x ticks"))
		self.zukKillTimeCopy.setText(_translate("TzienceMachine", "Copy data"))
		self.zukSetTimeLabel.setText(_translate("TzienceMachine", "Zuk with set average time: x ticks"))
		self.zukSetTimeCopy.setText(_translate("TzienceMachine", "Copy data"))
		self.zukNoSetTimeLabel.setText(_translate("TzienceMachine", "Zuk without set average time: x ticks"))
		self.zukNoSetTimeCopy.setText(_translate("TzienceMachine", "Copy data"))
		self.copyZukSim_btn.setText(_translate("TzienceMachine", "Copy Zuk duration distribution"))
		self.menuTest.setTitle(_translate("TzienceMachine", "About"))
		self.menuList_of_Assumptions.setTitle(_translate("TzienceMachine", "List of Assumptions"))
		self.menuGear_setups.setTitle(_translate("TzienceMachine", "Gear setups"))
		self.menuCredits.setTitle(_translate("TzienceMachine", "Credits"))
		self.actionAll_actions_are_tick_perfect.setText(_translate("TzienceMachine", "1. All actions are tick perfect"))
		self.action2_This_sim_uses_Python_RNG_which_may_differ_slightly_from_Java_RNG.setText(_translate("TzienceMachine", "2. This sim uses Python RNG which may differ slightly from Java RNG"))
		self.actionAssumes_Jad_Mager_skip.setText(_translate("TzienceMachine", "3. Assumes Single Jad heals 3 times"))
		self.action4_Assumes_each_Triple_Jad_heals_2_times.setText(_translate("TzienceMachine", "4. Assumes each Triple Jad heals 2 times"))
		self.action5_Assumes_in_a_no_set_Zuk_blowpipe_is_used_to_tag_Jad.setText(_translate("TzienceMachine", "5. Assumes in a no set Zuk blowpipe is used to tag Jad"))
		self.action6_Assumes_in_a_set_zuk_chins_are_used_to_tag_jad.setText(_translate("TzienceMachine", "6. Assumes in a set Zuk chins are used to tag jad"))
		self.action7_Assumes_tick_perfect_healer_tagging_on_Zuk_is_always_possible.setText(_translate("TzienceMachine", "7. Assumes tick perfect healer tagging on Zuk is always possible"))
		self.action8_Assumes_east_west_shield_movement_is_0_time_loss_as_you_can_hit_zuk_in_the_time_it_takes_the_shield_to_travel.setText(_translate("TzienceMachine", "8. Assumes east/west shield movement is 0 time loss (as you can hit zuk in the time it takes the shield to travel)"))
		self.actionHead_Slayer_helm_i.setText(_translate("TzienceMachine", "Head: Slayer helm (i)"))
		self.actionCape_Ava_s_assembler.setText(_translate("TzienceMachine", "Cape: Ava\'s assembler"))
		self.actionNeck_Necklace_of_Anguish.setText(_translate("TzienceMachine", "Neck: Necklace of Anguish"))
		self.actionAmmo_Dragon_arrows_Dragon_darts.setText(_translate("TzienceMachine", "Ammo: Dragon arrows/Dragon darts"))
		self.actionChest_Armadyl_chestplate.setText(_translate("TzienceMachine", "Chest: Armadyl chestplate"))
		self.actionLegs_Armadyl_chainskirt.setText(_translate("TzienceMachine", "Legs: Armadyl chainskirt"))
		self.actionCape_Ava_s_assembler_2.setText(_translate("TzienceMachine", "Cape: Ava\'s assembler"))
		self.actionNeck_Necklace_of_anguish.setText(_translate("TzienceMachine", "Neck: Necklace of anguish"))
		self.actionAmmo_Dragon_arrows_Dragon_darts_2.setText(_translate("TzienceMachine", "Ammo: Dragon arrows/Dragon darts"))
		self.actionBody_Armadyl_Chestplate.setText(_translate("TzienceMachine", "Body: Armadyl Chestplate"))
		self.actionLegs_Armadyl_chainskirt_2.setText(_translate("TzienceMachine", "Legs: Armadyl chainskirt"))
		self.actionGloves_Barrows_gloves.setText(_translate("TzienceMachine", "Gloves: Barrows gloves"))
		self.actionBoots_Pegasian_boots.setText(_translate("TzienceMachine", "Boots: Pegasian boots"))
		self.actionRing_Ring_of_the_gods_i.setText(_translate("TzienceMachine", "Ring: Ring of the gods (i)"))
		self.actionHead_Slayer_helm_i_2.setText(_translate("TzienceMachine", "Head: Slayer helm (i)"))
		self.actionBoots_Pegasian_boots_2.setText(_translate("TzienceMachine", "Boots: Pegasian boots"))
		self.actionRing_Archers_ring_i.setText(_translate("TzienceMachine", "Ring: Archers ring (i)"))
		self.actionHead_Slayer_helm_i_3.setText(_translate("TzienceMachine", "Head: Slayer helm (i)"))
		self.actionBoots_Devout_boots.setText(_translate("TzienceMachine", "Boots: Devout boots"))
		self.actionRing_Ring_of_the_gods_i_2.setText(_translate("TzienceMachine", "Ring: Ring of the gods (i)"))
		self.actionHead_Armadyl_helmet.setText(_translate("TzienceMachine", "Head: Armadyl helmet"))
		self.actionBoots_Pegasian_boots_3.setText(_translate("TzienceMachine", "Boots: Pegasian boots"))
		self.actionRing_Ring_of_the_gods_i_3.setText(_translate("TzienceMachine", "Ring: Ring of the gods (i)"))
		self.actionHead_Armadyl_helmet_2.setText(_translate("TzienceMachine", "Head: Armadyl helmet"))
		self.actionBoots_Devout_boots_2.setText(_translate("TzienceMachine", "Boots: Devout boots"))
		self.actionRing_Ring_of_the_gods_i_4.setText(_translate("TzienceMachine", "Ring: Ring of the gods (i)"))
		self.action9_v.setText(_translate("TzienceMachine", "9. Assumes Jad heals are flat, these heal values are based off of an average obtained from multiple VODs"))
		self.actionThis_tool_was_made_possible_thanks_to_the_following_people.setText(_translate("TzienceMachine", "This tool was made possible thanks to the following people"))
		self.action_Phoneman_btw_Main_development.setText(_translate("TzienceMachine", "@Phoneman_btw - Main development"))
		self.action_JasonT20015_Moral_support_and_backseating.setText(_translate("TzienceMachine", "@JasonT20015 - Moral support and backseating"))
		self.action_aatykon_Original_idea_for_the_tool.setText(_translate("TzienceMachine", "@aatykon - Original idea for the tool"))
		self.actionDJ_Kumboi_Jad_healer_research.setText(_translate("TzienceMachine", "@dj_kumboi - Jad healer/Miscellaneous research"))
		self.actionWeapon_Twisted_bow_Toxic_blowpipe.setText(_translate("TzienceMachine", "Weapon: Twisted bow/Toxic blowpipe"))
		self.actionShield_None.setText(_translate("TzienceMachine", "Shield: None"))
		self.actionEveryone_from_the_Inferno_Speedrunning_Discord_discord_gg_zuk.setText(_translate("TzienceMachine", "Everyone from the Inferno Speedrunning Discord discord.gg/zuk"))
		self.action10_Assumes_you_are_always_max_potted_the_only_time_where_this_assumption_becomes_questionable_is_during_a_healer_skip.setText(_translate("TzienceMachine", "9. Assumes you are always max potted, the only time where this assumption becomes questionable is during a healer skip."))
		self.actionNoHPRegen.setText(_translate("TzienceMachine", "10. Assumes that no NPCs regen any HP"))
		self.action_JagexAsh_Clearing_up_how_Jad_Healers_work.setText(_translate("TzienceMachine", "@JagexAsh - Clearing up how Jad Healers work"))
		self.actionTest.setText(_translate("TzienceMachine", "Test"))
		self.actionTask_Standard.setText(_translate("TzienceMachine", "Task Standard"))
		self.actionTask_Archers.setText(_translate("TzienceMachine", "Task Archers"))
		self.actionTask_Devout.setText(_translate("TzienceMachine", "Task Devout"))
		self.actionOff_Task_Standard.setText(_translate("TzienceMachine", "Off Task Standard"))
		self.actionOff_Task_Devout.setText(_translate("TzienceMachine", "Off Task Devout"))
		self.action_haiyoart_Application_logo.setText(_translate("TzienceMachine", "@haiyoart - Application logo"))

	def startSim(self):
		global mager_times, single_jad_times, triple_jad_times, zuk_times, set_zuk_times, no_set_zuk_times, zuk_times_dict #This application is used so we can pretend to fight lava monsters, forgive me if I am not 100% professional and use bad practices
		start_time = time.time()
		n = self.simCount.value()
		n_but_formatted = "{:,}".format(n)
		self.completionLine.setText("Running %s simulations..." % (n_but_formatted))
		self.noSetLine.setText("Running %s simulations..." % (n_but_formatted))
		self.mageKillTimeLabel.setText("Mager average kill time: x ticks")
		self.singleJadKillTimeLabel.setText("Single Jad average kill time: x ticks")
		self.tripleJadsKillTimeLabel.setText("Triple Jad average kill time: x ticks")
		self.zukKillTimeLabel.setText("Zuk average kill time: x ticks")
		self.zukSetTimeLabel.setText("Zuk with set average time: x ticks")
		self.zukNoSetTimeLabel.setText("Zuk without set average time: x ticks")
		QtCore.QCoreApplication.processEvents()
		gear = self.gearBox.currentText()
		includeMager = self.includeMager.isChecked()
		includeJad = self.includeJad.isChecked()
		includeTrips = self.includeTrips.isChecked()
		includeZuk = self.includeZuk.isChecked()
		includeZukMager = self.includeZukMager.isChecked()
		includeZukJad = self.includeZukJad.isChecked()
		includeZukHealers = self.includeZukHealers.isChecked()
		mager_times, mage_average, single_jad_times, single_jad_average, triple_jad_average, triple_jad_times, zuk_times, zuk_average, set_zuk_times, set_zuk_average, no_set_zuk_times, no_set_zuk_average, zuk_times_dict = zuk_sim_backend.runSim(n, gear, includeMager, includeJad, includeTrips, includeZuk, includeZukMager, includeZukJad, includeZukHealers)
		elapsed_time = time.time() - start_time
		if elapsed_time < 3600:
			elapsed_time = zuk_sim_backend.format_seconds_to_mmss(elapsed_time)
		else:
			elapsed_time = zuk_sim_backend.format_seconds_to_hhmmss(elapsed_time)
		self.completionLine.setText("%s simulations completed with %s. [Completed in %s]" % (n_but_formatted, gear, elapsed_time))
		num_of_no_set_zuks = len(no_set_zuk_times)
		no_set_zuk_rate = zuk_sim_backend.format_a_over_b_to_percentage(num_of_no_set_zuks, n)
		self.noSetLine.setText("Total no set Zuks: %i (%s%%)" % (num_of_no_set_zuks, no_set_zuk_rate))
		if includeMager:
			self.mageKillTimeLabel.setText("Mager average kill time: %i ticks (%s)" % (mage_average, zuk_sim_backend.format_seconds_to_mmss(mage_average, True)))
		if includeJad:
			self.singleJadKillTimeLabel.setText("Single Jad average kill time: %i ticks (%s)" % (single_jad_average, zuk_sim_backend.format_seconds_to_mmss(single_jad_average, True)))
		if includeTrips:
			self.tripleJadsKillTimeLabel.setText("Triple Jad average kill time: %i ticks (%s)" % (triple_jad_average, zuk_sim_backend.format_seconds_to_mmss(triple_jad_average, True)))
		if includeZuk:
			self.zukKillTimeLabel.setText("Zuk average kill time: %i ticks (%s)" % (zuk_average, zuk_sim_backend.format_seconds_to_mmss(zuk_average, True)))
			self.zukSetTimeLabel.setText("Zuk with set average time: %i ticks (%s)" % (set_zuk_average, zuk_sim_backend.format_seconds_to_mmss(set_zuk_average, True)))
			self.zukNoSetTimeLabel.setText("Zuk without set average time: %i ticks (%s)" % (no_set_zuk_average, zuk_sim_backend.format_seconds_to_mmss(no_set_zuk_average, True)))

	def copyData(self, list):
		output = ', '.join([str(i) for i in list])
		pyperclip.copy(output)

	def copyMageData(self):
		try:
			self.copyData(mager_times)
		except NameError:
			pyperclip.copy("As you didn't copy anything here's a nice joke for you: What do you call a programmer from Finland... Nerdic!")

	def copySingleJadData(self):
		try:
			self.copyData(single_jad_times)
		except NameError:
			pyperclip.copy("As you didn't copy anything here's a nice joke for you: What do you call a paper airplane that can't fly... Stationary!")

	def copyTripleJadData(self):
		try:
			self.copyData(triple_jad_times)
		except NameError:
			pyperclip.copy("As you didn't copy anything here's a nice joke for you: What works faster than a calculator... A Calcu-now!")

	def copyZukData(self):
		try:
			self.copyData(zuk_times)
		except NameError:
			pyperclip.copy("As you didn't copy anything here's a nice joke for you: How much does a chimney cost... It's on the house!")

	def copySetZukData(self):
		try:
			self.copyData(set_zuk_times)
		except NameError:
			pyperclip.copy("As you didn't copy anything here's a nice joke for you: Despite being a very successful games company JaGeX still does not have a ticket system or any real customer support.")

	def copyNoSetZukData(self):
		try:
			self.copyData(no_set_zuk_times)
		except NameError:
			pyperclip.copy("As you didn't copy anything here's a nice joke for you: The other day I got hit in the head with a can of soda... Luckily it was a soft drink")

	def copyZukDistribution(self):
		try:
			output = ""
			for key in sorted(zuk_times_dict.keys()):
				output += "%s: %s" % (key, zuk_times_dict[key]) + "\n"
			pyperclip.copy(output)
		except NameError:
			pyperclip.copy('''As you didn't copy anything here's a nice joke for you:
				Two big girls walk into a bar,
				They order drinks, in a thick accent.
				"You two ladies from Ireland?" asks the bartender.
				Offended, one of them replies "Wales!"
				"Oh I'm so sorry," says the bartender, "Are you two whales from Ireland?"''')

	def linkToPage(self, link):
		webbrowser.open(link)

	def linkToPhoneman(self):
		self.linkToPage("https://twitter.com/Phoneman_btw")

	def linkToJason(self):
		self.linkToPage("https://twitter.com/JasonT20015")

	def linkToAaty(self):
		self.linkToPage("https://twitter.com/aatykon")

	def linkToHaiYo(self):
		self.linkToPage("https://twitter.com/haiyoart")

	def linkToDjKumboi(self):
		self.linkToPage("https://twitter.com/dj_kumboi")

	def linkToAshTweet(self):
		self.linkToPage("https://twitter.com/JagexAsh/status/1344226351654514688")

	def linkToInfernoDisc(self):
		self.linkToPage("https://discord.com/invite/zuk")

	def linkToTaskStandard(self):
		self.linkToPage("https://i.imgur.com/HHzmm6e.png")

	def linkToTaskArchers(self):
		self.linkToPage("https://i.imgur.com/wghlpn7.png")

	def linkToTaskDevout(self):
		self.linkToPage("https://i.imgur.com/72TSQ3f.png")

	def linkToOffTaskStandard(self):
		self.linkToPage("https://i.imgur.com/C2ZMeGC.png")

	def linkToOffTaskDevout(self):
		self.linkToPage("https://i.imgur.com/4HLZrXx.png")


if __name__ == "__main__":
	import sys
	app = QtWidgets.QApplication(sys.argv)
	TzienceMachine = QtWidgets.QMainWindow()
	ui = Ui_TzienceMachine()
	ui.setupUi(TzienceMachine)
	TzienceMachine.show()
	sys.exit(app.exec_())
